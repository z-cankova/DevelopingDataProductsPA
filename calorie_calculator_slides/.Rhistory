ones <- rep(1, nrow(galton))
lm(child ~ ones + parent - 1, galton)
lm(child ~ ones + parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, data = trees)
trees2 <- eliminate ("Girth", trees)
head
head(trees2)
fit2 <- lm(Volume ~ Height + Constant - 1, data = trees2)
lapply(list(fit, fit2), coef)
exit()
bye()
swirl()
all <- lm(fertility ~ ., data = swiss)
all <- lm(Fertility ~ ., data = swiss)
summary(all)
summary(lm(Fertility ~ Agriculture, data = swiss))
cor(Examination, Education, data = swiss)
cor(Examination, Education)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, data = swiss)
all$coef - efit$coef
all$coefficients - efit$coefficients
6
dim(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays,class)
fit<-lm(count~spray, data = InsectSprays)
summary(fit)$coef
est<-summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit<-lm(count~spray-1, data = InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2<-lm(count~spray2, data = InsectSprays)
summarynfit2)$coef
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit(Numeric~Year,data=hunger)
fit<-lm(Numeric~Year,data=hunger)
summary(fit)$coef
lmF <- lm(Numeric[hunger$sex == "Female"] ~ Year[hunger$sex == "Female"], data = hunger)
lmF <- lm(hunger$Numeric[hunger$sex == "Female"] ~ hunger$Year[hunger$sex == "Female"])
hunger$Numeric[hunger$sex == "Female"]
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmBoth <- lm(Numeric ~ Year + Sex, data = hunger)
summary(lmBoth)
lmInter(Numeric ~ Year + Sex + Sex*Year, data = Hunger)
lmInter(Numeric ~ Year + Sex + Sex*Year, data = hunger)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, data = hunger)
summary(lmInter)
fit <- lm(y ~ x, data = out2)
plot(fit, which = 1)
fitno <- lim(y ~ x, data = out2[-1, ])
fitno <- lm(y ~ x, data = out2[-1, ])
plot(fitno, which = 1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1, ])
1 - resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(deviance(fit)/res(df))
sigma <- sqrt(deviance(fit)/5)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/(sigma*sqrt(1 - hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which = 3)
plot(fit, which = 2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1 - hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which = 5)
bye
bye()
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality)
mdl <- lm(Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, data = swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, data = swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
fti3 <- lm(fertility ~ Agriculture + Examination + Education)
fti3 <- lm(fertility ~ Agriculture + Examination + Education, data = swiss)
fti3 <- lm(Fertility ~ Agriculture + Examination + Education, data = swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, data = swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1)- decviance(fit3))/2
n <- (deviance(fit1)- deviance(fit3))/2
n/d
pf(n/d,2,43,lower.tail = FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, family = "binomial", data = ravenData)
lodds <- predict(mdl, data.frame(ravenScore = c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000,50))
nxt()
tail(hits)
class(hits$date)
as.inteder(head(hits$date))
as.integer(head(hits$date))
mdl <- glm(visits ~ date, family = "poisson", data = hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits$visits)
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(0.95, lambda)
mdl2 <- glm(visits ~ date, offset = log(visits+1), family = poisson, data = hits)
mdl2 <- glm(simplystats ~ date, offset = log(visits+1), family = poisson, data = hits)
qpois(0.95, mdl2$fitted.values[704])
library(MASS)
shuttle?
?shuttle
glm(auto ~ wind, family = "binomial", data = shuttle)
glm(use ~ wind, family = "binomial", data = shuttle)
exp(-0.25131)
exp(-0.03181)
exp(-0.25131)/(exp(-0.25131)+exp(-0.03181))
1/exp(-0.03181)
1/exp(-0.25131)
glm(use ~ wind + magn, family = "binomial", data = shuttle)
exp(-3.201e-02)
1/exp(-3.201e-02)
glm(1-use ~ wind, family = "binomial", data = shuttle)
y <- as.factor(1 - asnumeric(shuttle$use))
y <- as.factor(1 - as.numeric(shuttle$use))
y
shuttle(use)
shuttle$use
y<- relevel(shuttle$use)
y<- relevel(shuttle$use, ref = "noauto")
glm(y ~ shuttle$wind, family = "binomial"
)
View(InsectSprays)
View(InsectSprays)
View(InsectSprays)
View(InsectSprays)
glm(spray ~ count, family = "poisson", data = InsectSpray)
glm(spray ~ count, family = "poisson", data = InsectSprays)
glm(count ~ spray, family = "poisson", data = InsectSprays)
exp(0.05588)
1/exp(0.05588)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
splineTerms<-sapply(knots,function(knot)(x>knot)*(x-knot))
xMat<-cbind(1,x,splineTerms)
lm(y~xMat)
yhat<-predict(lm(y~xMat))plot(x,y,frame=FALSE,pch=21,bg="lightblue",cex=2)
yhat<-predict(lm(y~xMat))
plot(x,y,frame=FALSE,pch=21,bg="lightblue",cex=2)
lines(x,yhat,col="red",lwd=2)
df <- data.frame(xMat)
df <- cbind(y, df)
names(df) <- c("y", "Intercept", "x", "splines")
lm(y ~ . - 1, data=df)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(caret)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(concrete)
qplot(inTrain, CompressiveStrength, data = concrete, color = Cement)
qplot(as.numeric(row.names(training)), CompressiveStrength, data = training, color = Cement)
qplot(as.numeric(row.names(training)), CompressiveStrength, data = training, color = BlastFurnaceSlag)
qplot(as.numeric(seq_along(1:nrow(training)), CompressiveStrength, data = training, color = Cement)
)
qplot(seq_along(1:nrow(training)), CompressiveStrength, data = training, color = Cement)
qplot(seq_along(1:nrow(training)), CompressiveStrength, data = training, color = BlastFurnaceSlag)
qplot(seq_along(1:nrow(training)), CompressiveStrength, data = training, color = FlyAsh)
qplot(seq_along(1:nrow(training)), CompressiveStrength, data = training, color = Water)
qplot(seq_along(1:nrow(training)), CompressiveStrength, data = training, color = Superplasticizer)
qplot(seq_along(1:nrow(training)), CompressiveStrength, data = training, color = CoarseAggregate)
qplot(seq_along(1:nrow(training)), CompressiveStrength, data = training, color = FineAggregate)
qplot(seq_along(1:nrow(training)), CompressiveStrength, data = training, color = Age)
qplot(seq_along(1:nrow(training)), CompressiveStrength, data = training, color = FlyAsh)
qplot(seq_along(Superplasticizer, data = training)
qplot(Superplasticizer, data = training)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
preProc <- preProcess(training[,grep("^IL", names(training))], method = "pca", thresh = 0.9)
grep("^IL", names(training))
preProc$numComp
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training_IL <- training[, grep("^IL", names(training))]
head(training_IL)
training_IL <- training[, c(1, grep("^IL", names(training)))]
head(training_IL)
modelFit1 <- train(diagnosis ~ ., method = "glm", data = training_IL)
modelFit1 <- train(training_IL$diagnosis ~ ., method = "glm", data = training_IL)
modelFit1 <- train(diagnosis ~ ., method = "glm", data = training_IL)
install.packages("e1071")
modelFit1 <- train(diagnosis ~ ., method = "glm", data = training_IL)
confusionMatrix(testing$diagnosis, predict(modelFit1,testing))
preProc <- preProcess(training_IL, method = "pca", thresh = 0.8)
summary(training_IL)
preProc <- preProcess(training_IL[,-1], method = "pca", thresh = 0.8)
trainPC <- predict(preProc, training_IL[,-1])
head(trainPC)
modelFit2 <- train(training_IL$diagnosis ~ ., model = "glm", data = trainPC)
modelFit2 <- train(training_IL$diagnosis ~ ., model = "glm", data = trainPC)
testPC <- predict(preProc, testing[,-1])
testPC <- predict(preProc, testing[, c(1, grep("^IL", names(training)))])
testPC <- predict(preProc, testing[, grep("^IL", names(testing)])
testPC <- predict(preProc, testing[, grep("^IL", names(testing))])
confusionMatrix(testing$diagnosis, predict(modelFit2,testPC))
modelFit3 <- train(diagnosis ~ ., method = "glm", preProcess = "pca", trControl = trainControl(preProcOptions = list(thresh = 0.8)), data = training_IL)
confusionMatrix(testing$diagnosis, predict(modelFit3,testing))
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
modFitV <- train(y ~ ., model = "rpart2", data = vowel.train)
modFitV <- train(y ~ ., model = "rpart2", data = vowel.train)
install.packages("randomForest")
library(caret)
set.seed(33833)
str(vowel.test)
modFitV <- train(y ~ ., model = "rpart2", data = vowel.train)
library(randomForest)
modFitV <- train(y ~ ., model = "rpart2", data = vowel.train)
varImp(modFitV)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
modRF <- train(y ~ ., method = "rf", data = vowel.train)
library(caret)
modRF <- train(y ~ ., method = "rf", data = vowel.train)
modRF <- train(y ~ ., method = "rf", data = vowel.train)
library(randomForest)
modRF <- train(y ~ ., method = "rf", data = vowel.train)
modGBM <- train(y ~ ., method = "gbm", data = vowel.train)
modGBM <- train(y ~ ., method = "gbm", data = vowel.train)
modRF
modGBM
set.seed(33833)
modRF <- train(y ~ ., method = "rf", data = vowel.train)
set.seed(33833)
modGBM <- train(y ~ ., method = "gbm", data = vowel.train, verbose = FALSE)
testPredictionRF <- predict(modRF, newdata = vowel.test)
testPredictionGBM <- predict(modGBM, newdata = vowel.test)
confusionMatrix(testPredictionRF, vowel.test$y)
confusionMatrix(testPredictionGBM, vowel.test$y)
confusionMatrix(testPredictionRF, testPredictionGBM)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
RFFit2 <- train(diagnosis ~ ., method = "rf", data = training)
set.seed(62433)
GBMFit2 <- train(diagnosis ~ ., method = "gbm", data = training, verbose = FALSE)
set.seed(62433)
LDAFit2 <- train(diagnosis ~ ., method = "lda", data = training)
RFprediction <- predict(RFFit, newdata = testing)
RFprediction <- predict(RFFit2, newdata = testing)
GBMprediction <- predict(GBMFit2, newdata = testing)
LDAprediction <- predict(LDAFit2, newdata = testing)
DFprediction <- data.frame(RFprediction, GBMprediction, LDAprediction, diagnosis = testing$diagnosis)
CombinedFit <- train(diagnosis ~ ., method = "rf", data = DFprediction)
set.seed(62433)
CombinedFit <- train(diagnosis ~ ., method = "rf", data = DFprediction)
combPrediction <- predict(CombinedFit, newdata = DFPredictions)
combPrediction <- predict(CombinedFit, newdata = DFPrediction)
combPrediction <- predict(CombinedFit, newdata = DFprediction)
CombinedFit
DFprediction <- data.frame(RFprediction, GBMprediction, LDAprediction, diagnosis = training$diagnosis)
rm(DFprediction)
DFprediction <- data.frame(RFprediction, GBMprediction, LDAprediction, diagnosis = training$diagnosis)
RFprediction <- predict(RFFit2, newdata = training)
GBMprediction <- predict(GBMFit2, newdata = training)
LDAprediction <- predict(LDAFit2, newdata = training)
DFprediction <- data.frame(RFprediction, GBMprediction, LDAprediction, diagnosis = training$diagnosis)
set.seed(62433)
CombinedFit <- train(diagnosis ~ ., method = "rf", data = DFprediction)
RFtestPred <- predict(RFFit2, newdata = testing)
GBMtestPred <- predict(GBMFit2, newdata = testing)
LDAtestPred <- predict(LDAFit2, newdata = testing)
View(DFprediction)
View(DFprediction)
CombTestPred <- data.frame(RFprediction = RFtestPred, GBMprediction = GBMtestPred, LDAprediction = LDAtestPred)
CombTest <- predict(CombinedFit, newdata = CombTestPred)
confusionMatrix(CombTest, testing$diagnosis)
confusionMatrix(predict(GBMFit, newdata = testing), testing$diagnosis)
confusionMatrix(predict(GBMFit2, newdata = testing), testing$diagnosis)
confusionMatrix(predict(RFFit2, newdata = testing), testing$diagnosis)
confusionMatrix(predict(LDAFit2, newdata = testing), testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
LassoFit = train(CompressiveStrength ~ ., method = "lasso", data = concrete)
plot(LassoFit, penalty)
plot(LassoFit, xvar = penalty)
plot(LassoFit, xvar = "penalty")
plot(LassoFit, xvar = "step")
plot(LassoFit$FinalModel)
plot(LassoFit$finalModel)
LassoFit$finalModel
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
library(forecast)
TimeFit <- bats(training)
TimeFit <- bats(tstrain)
plot(forecast(TimeFit))
forecast(TimeFit, h=length(testing), level=c(95,95))
View(testing)
View(testing)
plot(forecast(TimeFit, h = testing$X, level = c(95,95)))
forecast(TimeFit, h = testing$X, level = c(95,95))
forecast(TimeFit, h=235, level=c(95,95))
timePrediction <- forecast(TimeFit, h=235, level=c(95,95))
timePrediction$upper
timePrediction <- forecast(TimeFit, h=235, level=95)
x<-timePrediction$upper-testting$visitsTumblr
x<-timePrediction$upper-testing$visitsTumblr
View(x)
View(x)
which(x < 0)
9/235
1 - 9/235
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
install.packages("e1071")
library(e1071)
library(e1071)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
SVMFit <- svm(CompressiveStrength ~ ., data = concrete)
SVM$finalFit
SVMFit$finalFit
str(SVMFit)
SVMPredict <- predict(SVMFit, testing)
sqrt(sum((SVMPredict-testing$CompressiveStrength)^2))
set.seed(325)
SVMFit <- svm(CompressiveStrength ~ ., data = concrete)
SVMPredict <- predict(SVMFit, testing)
sqrt(sum((SVMPredict-testing$CompressiveStrength)^2))
sqrt(sum((SVMPredict-testing$CompressiveStrength)^2)/length(testing$CompressiveStrength))
sqrt(mean((SVMPredict-testing$CompressiveStrength)^2))
setwd("~/Documents/Coursera/Developing Data Products/Project/PA1/Shiny_Calorie_Counter")
library(slidify)
slidify("index.Rmd")
author("shiny_calorie_calculator")
setwd("~/Documents/Coursera/Developing Data Products/Project/PA1")
library(slidify)
author("shiny_calorie_calculator")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
setwd("~/Documents/Coursera/Developing Data Products/Project/PA1/shiny_calorie_calculator")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
library(shiny)
setwd("~/Documents/Coursera/Developing Data Products/Project/PA1")
runApp()
runApp()
runApp()
slidify("index.Rmd")
setwd("~/Documents/Coursera/Developing Data Products/Project/PA1/shiny_calorie_calculator")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
library(googleVis)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
library(googleVis)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
